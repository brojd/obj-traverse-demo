const descriptions = {
  'findFirst': ['findFirst(tree, childrenKey, objToFindBy)', 'It iterates through each deep nested object and if finds object that has prop and value specified in objToFindBy argument, it stops the walk and returns reference to this object. If none is found, it returns false. Please note that the method checks all children on current level and then it deepens to the next level - grandchildren.'],
  'findAll': ['findAll(tree, childrenKey, objToFindBy)', 'It iterates through each deep nested object and for every found object that has prop and value specified in objToFindBy argument, it pushes reference of this object to the result array. When it finishes the walk, it returns the array. If none is found, it returns false.'],
  'findAndModifyFirst': ['findAndModifyFirst(tree, childrenKey, objToFindBy, replacementObj)', 'It iterates through each deep nested object and if finds object that has prop and value specified in objToFindBy argument, it replaces the current object with replacementObj, stops recursive walk and returns reference to the root object. If none is found, it returns false. Please note that the method checks all children on current level and then it deepens to the next level - grandchildren.'],
  'findAndModifyAll': ['findAndModifyAll(tree, childrenKey, objToFindBy, replacementObj)', 'It iterates through each deep nested object and for every found object that has prop and value specified in objToFindBy argument, it replaces the current object with replacementObj and returns reference to the root object. If none is found, it returns false.'],
  'findAndDeleteFirst': ['findAndDeleteFirst(tree, childrenKey, objToFindBy)', 'It iterates through each deep nested object and if finds object that has prop and value specified in objToFindBy argument, it deletes it, stops the walk and returns reference to the root object. If none is found, it returns false. Please note that the method checks all children on current level and then it deepens to the next level - grandchildren.'],
  'findAndDeleteAll': ['findAndDeleteAll(tree, childrenKey, objToFindBy)', 'It iterates through each deep nested object and if finds object that has prop and value specified in objToFindBy argument, it deletes it, continue the walk and returns reference to the root object once finished. If none of objects is found, it returns false.']
};

export default descriptions;
